/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertGraphDefinitionObservation struct {

	// The ID of the monitor used by the widget.
	AlertID *string `json:"alertId,omitempty" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	VizType *string `json:"vizType,omitempty" tf:"viz_type,omitempty"`
}

type AlertGraphDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	// +kubebuilder:validation:Required
	VizType *string `json:"vizType" tf:"viz_type,omitempty"`
}

type AlertValueDefinitionObservation struct {

	// The ID of the monitor used by the widget.
	AlertID *string `json:"alertId,omitempty" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type AlertValueDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type ApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []GroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []MultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []MultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ApmStatsQueryColumnsObservation struct {

	// A user-assigned alias for the column.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ApmStatsQueryColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ApmStatsQueryObservation struct {

	// Column properties used by the front end for display.
	Columns []ColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The operation name associated with the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization's host group name and value.
	PrimaryTag *string `json:"primaryTag,omitempty" tf:"primary_tag,omitempty"`

	// The resource name.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	RowType *string `json:"rowType,omitempty" tf:"row_type,omitempty"`

	// The service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type AuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []AuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type AuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []AuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type AuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type AuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type AuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []AuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []AuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []AuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type AuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []AuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []AuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []AuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ChangeDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ChangeDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []CustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []RequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ChangeDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []CustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []RequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ChangeDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []RequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []RequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []RequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type ChangeDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []RequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []RequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []RequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type ChangeDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ChangeDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ChangeDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ChangeDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ChangeDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []ChangeDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	Formula []ChangeDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	LogQuery []ChangeDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []ChangeDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []ChangeDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []ChangeDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []ChangeDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type ChangeDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ChangeDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	// +kubebuilder:validation:Optional
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	// +kubebuilder:validation:Optional
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []ChangeDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	// +kubebuilder:validation:Optional
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []ChangeDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	// +kubebuilder:validation:Optional
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ChangeDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ChangeDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []ChangeDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []ChangeDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	// +kubebuilder:validation:Optional
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type ChangeDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ChangeDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ChangeDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []RequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []RequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []RequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []RequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []ChangeDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ChangeDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []RequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []RequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []RequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []RequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ChangeDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ChangeDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ChangeDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ChangeDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ChangeDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ChangeDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ChangeDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ChangeDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ChangeDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ChangeDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ChangeDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ChangeDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type CheckStatusDefinitionObservation struct {

	// The check to use in the widget.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// The check group to use in the widget.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	Grouping *string `json:"grouping,omitempty" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type CheckStatusDefinitionParameters struct {

	// The check to use in the widget.
	// +kubebuilder:validation:Required
	Check *string `json:"check" tf:"check,omitempty"`

	// The check group to use in the widget.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	// +kubebuilder:validation:Required
	Grouping *string `json:"grouping" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ColumnsObservation struct {

	// A user-assigned alias for the column.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type CustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type CustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type DashboardObservation struct {

	// A list of dashboard lists this dashboard belongs to.
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// A list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoved []*float64 `json:"dashboardListsRemoved,omitempty" tf:"dashboard_lists_removed,omitempty"`

	// The description of the dashboard.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// The layout type of the dashboard. Valid values are `ordered`, `free`.
	LayoutType *string `json:"layoutType,omitempty" tf:"layout_type,omitempty"`

	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyList []*string `json:"notifyList,omitempty" tf:"notify_list,omitempty"`

	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType *string `json:"reflowType,omitempty" tf:"reflow_type,omitempty"`

	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// A list of tags assigned to the Dashboard. Only team names of the form `team:<name>` are supported.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The list of template variables for this dashboard.
	TemplateVariable []TemplateVariableObservation `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`

	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePreset []TemplateVariablePresetObservation `json:"templateVariablePreset,omitempty" tf:"template_variable_preset,omitempty"`

	// The title of the dashboard.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The URL of the dashboard.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The list of widgets to display on the dashboard.
	Widget []WidgetObservation `json:"widget,omitempty" tf:"widget,omitempty"`
}

type DashboardParameters struct {

	// A list of dashboard lists this dashboard belongs to.
	// +kubebuilder:validation:Optional
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The description of the dashboard.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	// +kubebuilder:validation:Optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// The layout type of the dashboard. Valid values are `ordered`, `free`.
	// +kubebuilder:validation:Optional
	LayoutType *string `json:"layoutType,omitempty" tf:"layout_type,omitempty"`

	// The list of handles for the users to notify when changes are made to this dashboard.
	// +kubebuilder:validation:Optional
	NotifyList []*string `json:"notifyList,omitempty" tf:"notify_list,omitempty"`

	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	// +kubebuilder:validation:Optional
	ReflowType *string `json:"reflowType,omitempty" tf:"reflow_type,omitempty"`

	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	// +kubebuilder:validation:Optional
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// A list of tags assigned to the Dashboard. Only team names of the form `team:<name>` are supported.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The list of template variables for this dashboard.
	// +kubebuilder:validation:Optional
	TemplateVariable []TemplateVariableParameters `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`

	// The list of selectable template variable presets for this dashboard.
	// +kubebuilder:validation:Optional
	TemplateVariablePreset []TemplateVariablePresetParameters `json:"templateVariablePreset,omitempty" tf:"template_variable_preset,omitempty"`

	// The title of the dashboard.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The URL of the dashboard.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The list of widgets to display on the dashboard.
	// +kubebuilder:validation:Optional
	Widget []WidgetParameters `json:"widget,omitempty" tf:"widget,omitempty"`
}

type DistributionDefinitionObservation struct {

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []DistributionDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type DistributionDefinitionParameters struct {

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []DistributionDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type DistributionDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []DistributionDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []DistributionDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []DistributionDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []DistributionDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []DistributionDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []DistributionDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []DistributionDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []DistributionDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []RequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	ApmStatsQuery []ApmStatsQueryObservation `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// The query to use for this widget.
	LogQuery []RequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []RequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []RequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []RequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []RequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type DistributionDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []ApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []RequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type DistributionDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type DistributionDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type DistributionDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []DistributionDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []DistributionDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []DistributionDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []DistributionDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []DistributionDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []DistributionDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []DistributionDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []DistributionDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type DistributionDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type EventObservation struct {

	// The event query to use in the widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type EventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type EventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type EventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type EventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []SortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type EventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []SortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type EventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type EventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type EventQueryObservation struct {

	// The compute options.
	Compute []ComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []EventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []SearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type EventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []EventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []SearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type EventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type EventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type EventStreamDefinitionObservation struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type EventStreamDefinitionParameters struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type EventTimelineDefinitionObservation struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type EventTimelineDefinitionParameters struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type FillApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []FillApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FillApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []FillApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []FillApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []FillApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []FillLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FillLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []FillLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []FillLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []FillLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillObservation struct {

	// The query to use for this widget.
	ApmQuery []FillApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []FillLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []FillProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []FillRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []FillSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type FillParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []FillApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []FillLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []FillProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []FillRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []FillSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type FillProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type FillProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type FillRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []FillRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FillRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []FillRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []FillRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []FillRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []FillSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FillSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []FillSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []FillSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []FillSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type FormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type FormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []ConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []LimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []StyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type FormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []LimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []StyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type FormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type FormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type FreeTextDefinitionObservation struct {

	// The color of the text in the widget.
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type FreeTextDefinitionParameters struct {

	// The color of the text in the widget.
	// +kubebuilder:validation:Optional
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type GeomapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type GeomapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type GeomapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []GeomapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	Request []GeomapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []GeomapDefinitionStyleObservation `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	View []ViewObservation `json:"view,omitempty" tf:"view,omitempty"`
}

type GeomapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []GeomapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []GeomapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []GeomapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	// +kubebuilder:validation:Required
	View []ViewParameters `json:"view" tf:"view,omitempty"`
}

type GeomapDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type GeomapDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type GeomapDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GeomapDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GeomapDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []GeomapDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []GeomapDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []GeomapDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type GeomapDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []GeomapDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []GeomapDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []GeomapDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type GeomapDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type GeomapDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type GeomapDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GeomapDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []GeomapDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []GeomapDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []GeomapDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []GeomapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []GeomapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionRequestObservation struct {
	Formula []RequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []GeomapDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []RequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []GeomapDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type GeomapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []RequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []GeomapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []RequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []GeomapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type GeomapDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []QueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []RequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []GeomapDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []RequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []RequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []RequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type GeomapDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type GeomapDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type GeomapDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []GeomapDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []GeomapDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []GeomapDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []GeomapDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []GeomapDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type GeomapDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []GeomapDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []GeomapDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []GeomapDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []GeomapDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []GeomapDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type GeomapDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type GeomapDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type GeomapDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []GeomapDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GeomapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GeomapDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []GeomapDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []GeomapDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []GeomapDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []GeomapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []GeomapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionStyleObservation struct {

	// The color palette to apply to the widget.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type GeomapDefinitionStyleParameters struct {

	// The color palette to apply to the widget.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Required
	PaletteFlip *bool `json:"paletteFlip" tf:"palette_flip,omitempty"`
}

type GeomapDefinitionViewObservation struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	Focus *string `json:"focus,omitempty" tf:"focus,omitempty"`
}

type GeomapDefinitionViewParameters struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	// +kubebuilder:validation:Required
	Focus *string `json:"focus" tf:"focus,omitempty"`
}

type GroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GroupDefinitionObservation struct {

	// The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The image URL to display as a banner for the group.
	BannerImg *string `json:"bannerImg,omitempty" tf:"banner_img,omitempty"`

	// The layout type of the group. Valid values are `ordered`.
	LayoutType *string `json:"layoutType,omitempty" tf:"layout_type,omitempty"`

	// Whether to show the title or not.
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// The title of the group.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The list of widgets in this group.
	Widget []GroupDefinitionWidgetObservation `json:"widget,omitempty" tf:"widget,omitempty"`
}

type GroupDefinitionParameters struct {

	// The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The image URL to display as a banner for the group.
	// +kubebuilder:validation:Optional
	BannerImg *string `json:"bannerImg,omitempty" tf:"banner_img,omitempty"`

	// The layout type of the group. Valid values are `ordered`.
	// +kubebuilder:validation:Required
	LayoutType *string `json:"layoutType" tf:"layout_type,omitempty"`

	// Whether to show the title or not.
	// +kubebuilder:validation:Optional
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// The title of the group.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The list of widgets in this group.
	// +kubebuilder:validation:Optional
	Widget []GroupDefinitionWidgetParameters `json:"widget,omitempty" tf:"widget,omitempty"`
}

type GroupDefinitionWidgetObservation struct {

	// The definition for a Alert Graph widget.
	AlertGraphDefinition []WidgetAlertGraphDefinitionObservation `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	AlertValueDefinition []WidgetAlertValueDefinitionObservation `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	ChangeDefinition []WidgetChangeDefinitionObservation `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	CheckStatusDefinition []WidgetCheckStatusDefinitionObservation `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	DistributionDefinition []WidgetDistributionDefinitionObservation `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	EventStreamDefinition []WidgetEventStreamDefinitionObservation `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	EventTimelineDefinition []WidgetEventTimelineDefinitionObservation `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	FreeTextDefinition []WidgetFreeTextDefinitionObservation `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	GeomapDefinition []WidgetGeomapDefinitionObservation `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Heatmap widget.
	HeatmapDefinition []HeatmapDefinitionObservation `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	HostmapDefinition []HostmapDefinitionObservation `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The ID of the widget.
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// The definition for an Iframe widget.
	IframeDefinition []IframeDefinitionObservation `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	ImageDefinition []ImageDefinitionObservation `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for a List Stream widget.
	ListStreamDefinition []ListStreamDefinitionObservation `json:"listStreamDefinition,omitempty" tf:"list_stream_definition,omitempty"`

	// The definition for an Log Stream widget.
	LogStreamDefinition []LogStreamDefinitionObservation `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	ManageStatusDefinition []ManageStatusDefinitionObservation `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	NoteDefinition []NoteDefinitionObservation `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	QueryTableDefinition []QueryTableDefinitionObservation `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	QueryValueDefinition []QueryValueDefinitionObservation `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
	RunWorkflowDefinition []RunWorkflowDefinitionObservation `json:"runWorkflowDefinition,omitempty" tf:"run_workflow_definition,omitempty"`

	// The definition for an SLO (Service Level Objective) List widget.
	SLOListDefinition []SLOListDefinitionObservation `json:"sloListDefinition,omitempty" tf:"slo_list_definition,omitempty"`

	// The definition for a Scatterplot widget.
	ScatterplotDefinition []ScatterplotDefinitionObservation `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	ServiceLevelObjectiveDefinition []ServiceLevelObjectiveDefinitionObservation `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	ServicemapDefinition []ServicemapDefinitionObservation `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	SunburstDefinition []SunburstDefinitionObservation `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	TimeseriesDefinition []TimeseriesDefinitionObservation `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	ToplistDefinition []ToplistDefinitionObservation `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Topology Map widget.
	TopologyMapDefinition []TopologyMapDefinitionObservation `json:"topologyMapDefinition,omitempty" tf:"topology_map_definition,omitempty"`

	// The definition for a Trace Service widget.
	TraceServiceDefinition []TraceServiceDefinitionObservation `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The definition for a Treemap widget.
	TreemapDefinition []TreemapDefinitionObservation `json:"treemapDefinition,omitempty" tf:"treemap_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	WidgetLayout []WidgetLayoutObservation `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type GroupDefinitionWidgetParameters struct {

	// The definition for a Alert Graph widget.
	// +kubebuilder:validation:Optional
	AlertGraphDefinition []WidgetAlertGraphDefinitionParameters `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	// +kubebuilder:validation:Optional
	AlertValueDefinition []WidgetAlertValueDefinitionParameters `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	// +kubebuilder:validation:Optional
	ChangeDefinition []WidgetChangeDefinitionParameters `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	// +kubebuilder:validation:Optional
	CheckStatusDefinition []WidgetCheckStatusDefinitionParameters `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	// +kubebuilder:validation:Optional
	DistributionDefinition []WidgetDistributionDefinitionParameters `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	// +kubebuilder:validation:Optional
	EventStreamDefinition []WidgetEventStreamDefinitionParameters `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	// +kubebuilder:validation:Optional
	EventTimelineDefinition []WidgetEventTimelineDefinitionParameters `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	// +kubebuilder:validation:Optional
	FreeTextDefinition []WidgetFreeTextDefinitionParameters `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	// +kubebuilder:validation:Optional
	GeomapDefinition []WidgetGeomapDefinitionParameters `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Heatmap widget.
	// +kubebuilder:validation:Optional
	HeatmapDefinition []HeatmapDefinitionParameters `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	// +kubebuilder:validation:Optional
	HostmapDefinition []HostmapDefinitionParameters `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The definition for an Iframe widget.
	// +kubebuilder:validation:Optional
	IframeDefinition []IframeDefinitionParameters `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	// +kubebuilder:validation:Optional
	ImageDefinition []ImageDefinitionParameters `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for a List Stream widget.
	// +kubebuilder:validation:Optional
	ListStreamDefinition []ListStreamDefinitionParameters `json:"listStreamDefinition,omitempty" tf:"list_stream_definition,omitempty"`

	// The definition for an Log Stream widget.
	// +kubebuilder:validation:Optional
	LogStreamDefinition []LogStreamDefinitionParameters `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	// +kubebuilder:validation:Optional
	ManageStatusDefinition []ManageStatusDefinitionParameters `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	// +kubebuilder:validation:Optional
	NoteDefinition []NoteDefinitionParameters `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	// +kubebuilder:validation:Optional
	QueryTableDefinition []QueryTableDefinitionParameters `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	// +kubebuilder:validation:Optional
	QueryValueDefinition []QueryValueDefinitionParameters `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
	// +kubebuilder:validation:Optional
	RunWorkflowDefinition []RunWorkflowDefinitionParameters `json:"runWorkflowDefinition,omitempty" tf:"run_workflow_definition,omitempty"`

	// The definition for an SLO (Service Level Objective) List widget.
	// +kubebuilder:validation:Optional
	SLOListDefinition []SLOListDefinitionParameters `json:"sloListDefinition,omitempty" tf:"slo_list_definition,omitempty"`

	// The definition for a Scatterplot widget.
	// +kubebuilder:validation:Optional
	ScatterplotDefinition []ScatterplotDefinitionParameters `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	// +kubebuilder:validation:Optional
	ServiceLevelObjectiveDefinition []ServiceLevelObjectiveDefinitionParameters `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	// +kubebuilder:validation:Optional
	ServicemapDefinition []ServicemapDefinitionParameters `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	// +kubebuilder:validation:Optional
	SunburstDefinition []SunburstDefinitionParameters `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	// +kubebuilder:validation:Optional
	TimeseriesDefinition []TimeseriesDefinitionParameters `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	// +kubebuilder:validation:Optional
	ToplistDefinition []ToplistDefinitionParameters `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Topology Map widget.
	// +kubebuilder:validation:Optional
	TopologyMapDefinition []TopologyMapDefinitionParameters `json:"topologyMapDefinition,omitempty" tf:"topology_map_definition,omitempty"`

	// The definition for a Trace Service widget.
	// +kubebuilder:validation:Optional
	TraceServiceDefinition []TraceServiceDefinitionParameters `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The definition for a Treemap widget.
	// +kubebuilder:validation:Optional
	TreemapDefinition []TreemapDefinitionParameters `json:"treemapDefinition,omitempty" tf:"treemap_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	// +kubebuilder:validation:Optional
	WidgetLayout []WidgetLayoutParameters `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type HeatmapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HeatmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HeatmapDefinitionEventObservation struct {

	// The event query to use in the widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type HeatmapDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type HeatmapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []HeatmapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	Event []EventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []HeatmapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	Yaxis []YaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type HeatmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []HeatmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []EventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []HeatmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []YaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type HeatmapDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []HeatmapDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []HeatmapDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []HeatmapDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []HeatmapDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []HeatmapDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []HeatmapDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []HeatmapDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []HeatmapDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []HeatmapDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []HeatmapDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []HeatmapDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []HeatmapDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []HeatmapDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []HeatmapDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type HeatmapDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []HeatmapDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []HeatmapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []HeatmapDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []HeatmapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []HeatmapDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []HeatmapDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type HeatmapDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type HeatmapDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type HeatmapDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []HeatmapDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []HeatmapDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []HeatmapDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []HeatmapDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []HeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []HeatmapDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []HeatmapDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []HeatmapDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type HeatmapDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type HeatmapDefinitionYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type HeatmapDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type HostmapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HostmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HostmapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []HostmapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	Request []HostmapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []HostmapDefinitionStyleObservation `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type HostmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []HostmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	// +kubebuilder:validation:Optional
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	// +kubebuilder:validation:Optional
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []HostmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []HostmapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type HostmapDefinitionRequestObservation struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Fill []FillObservation `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Size []SizeObservation `json:"size,omitempty" tf:"size,omitempty"`
}

type HostmapDefinitionRequestParameters struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Fill []FillParameters `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Size []SizeParameters `json:"size,omitempty" tf:"size,omitempty"`
}

type HostmapDefinitionStyleObservation struct {

	// The max value to use to color the map.
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type HostmapDefinitionStyleParameters struct {

	// The max value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Optional
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type IframeDefinitionObservation struct {

	// The URL to use as a data source for the widget.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type IframeDefinitionParameters struct {

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type ImageDefinitionObservation struct {

	// Whether to display a background or not.
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type ImageDefinitionParameters struct {

	// Whether to display a background or not.
	// +kubebuilder:validation:Optional
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	// +kubebuilder:validation:Optional
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	// +kubebuilder:validation:Optional
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	// +kubebuilder:validation:Optional
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	// +kubebuilder:validation:Optional
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type InputObservation struct {

	// Name of the workflow input.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Dashboard template variable. Can be suffixed with `.value` or `.key`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type InputParameters struct {

	// Name of the workflow input.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Dashboard template variable. Can be suffixed with `.value` or `.key`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type LegendInlineObservation struct {

	// Whether to hide the percentages of the groups.
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LegendInlineParameters struct {

	// Whether to hide the percentages of the groups.
	// +kubebuilder:validation:Optional
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LegendTableObservation struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LegendTableParameters struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type LimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ListStreamDefinitionObservation struct {

	// Nested block describing the requests to use when displaying the widget. Multiple `request` blocks are allowed with the structure below.
	Request []ListStreamDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ListStreamDefinitionParameters struct {

	// Nested block describing the requests to use when displaying the widget. Multiple `request` blocks are allowed with the structure below.
	// +kubebuilder:validation:Required
	Request []ListStreamDefinitionRequestParameters `json:"request" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ListStreamDefinitionRequestColumnsObservation struct {

	// Widget column field.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// Widget column width. Valid values are `auto`, `compact`, `full`.
	Width *string `json:"width,omitempty" tf:"width,omitempty"`
}

type ListStreamDefinitionRequestColumnsParameters struct {

	// Widget column field.
	// +kubebuilder:validation:Required
	Field *string `json:"field" tf:"field,omitempty"`

	// Widget column width. Valid values are `auto`, `compact`, `full`.
	// +kubebuilder:validation:Required
	Width *string `json:"width" tf:"width,omitempty"`
}

type ListStreamDefinitionRequestObservation struct {

	// Widget columns.
	Columns []RequestColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// Updated list stream widget.
	Query []ListStreamDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// Widget response format. Valid values are `event_list`.
	ResponseFormat *string `json:"responseFormat,omitempty" tf:"response_format,omitempty"`
}

type ListStreamDefinitionRequestParameters struct {

	// Widget columns.
	// +kubebuilder:validation:Required
	Columns []RequestColumnsParameters `json:"columns" tf:"columns,omitempty"`

	// Updated list stream widget.
	// +kubebuilder:validation:Required
	Query []ListStreamDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// Widget response format. Valid values are `event_list`.
	// +kubebuilder:validation:Required
	ResponseFormat *string `json:"responseFormat" tf:"response_format,omitempty"`
}

type ListStreamDefinitionRequestQueryObservation struct {

	// Source from which to query items to display in the stream. Valid values are `logs_stream`, `audit_stream`, `ci_pipeline_stream`, `ci_test_stream`, `rum_issue_stream`, `apm_issue_stream`, `logs_issue_stream`, `logs_pattern_stream`, `logs_transaction_stream`, `event_stream`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Size of events displayed in widget. Required if `data_source` is `event_stream`. Valid values are `s`, `l`.
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// List of indexes.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// Widget query.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ListStreamDefinitionRequestQueryParameters struct {

	// Source from which to query items to display in the stream. Valid values are `logs_stream`, `audit_stream`, `ci_pipeline_stream`, `ci_test_stream`, `rum_issue_stream`, `apm_issue_stream`, `logs_issue_stream`, `logs_pattern_stream`, `logs_transaction_stream`, `event_stream`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Size of events displayed in widget. Required if `data_source` is `event_stream`. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// List of indexes.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// Widget query.
	// +kubebuilder:validation:Optional
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type LogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []GroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type LogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type LogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type LogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type LogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []LogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []LogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []LogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type LogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []LogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []LogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []LogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type LogStreamDefinitionObservation struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	Sort []LogStreamDefinitionSortObservation `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type LogStreamDefinitionParameters struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	// +kubebuilder:validation:Optional
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	// +kubebuilder:validation:Optional
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	// +kubebuilder:validation:Optional
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []LogStreamDefinitionSortParameters `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type LogStreamDefinitionSortObservation struct {

	// The facet path for the column.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type LogStreamDefinitionSortParameters struct {

	// The facet path for the column.
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ManageStatusDefinitionObservation struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// Whether to show the priorities column.
	ShowPriority *bool `json:"showPriority,omitempty" tf:"show_priority,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`, `priority,asc`, `priority,desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ManageStatusDefinitionParameters struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	// +kubebuilder:validation:Optional
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	// +kubebuilder:validation:Optional
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	// +kubebuilder:validation:Optional
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// Whether to show the priorities column.
	// +kubebuilder:validation:Optional
	ShowPriority *bool `json:"showPriority,omitempty" tf:"show_priority,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`, `priority,asc`, `priority,desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	// +kubebuilder:validation:Optional
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type MarkerObservation struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MarkerParameters struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetadataObservation struct {

	// The expression alias.
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`
}

type MetadataParameters struct {

	// The expression alias.
	// +kubebuilder:validation:Optional
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

type MetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type MetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type MultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type MultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []NetworkQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type NetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []NetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type NetworkQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type NetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type NetworkQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []NetworkQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []NetworkQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []NetworkQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type NetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []NetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []NetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []NetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type NoteDefinitionObservation struct {

	// The background color of the note.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The size of the text.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type NoteDefinitionParameters struct {

	// The background color of the note.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The size of the text.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	// +kubebuilder:validation:Optional
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	// +kubebuilder:validation:Optional
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	// +kubebuilder:validation:Optional
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	// +kubebuilder:validation:Optional
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type ProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []GroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []GroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryEventQueryObservation struct {

	// The compute options.
	Compute []EventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []QueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []EventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []EventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []EventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []ApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []ApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []EventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []MetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []QueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []EventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []MetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QuerySortObservation struct {

	// The facet path for the column.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QuerySortParameters struct {

	// The facet path for the column.
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryTableDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryTableDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []QueryTableDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	Request []QueryTableDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryTableDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []QueryTableDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	// +kubebuilder:validation:Optional
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []QueryTableDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryTableDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryTableDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryTableDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryTableDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryTableDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestApmStatsQueryColumnsObservation struct {

	// A user-assigned alias for the column.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestApmStatsQueryColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestApmStatsQueryObservation struct {

	// Column properties used by the front end for display.
	Columns []RequestApmStatsQueryColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The operation name associated with the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization's host group name and value.
	PrimaryTag *string `json:"primaryTag,omitempty" tf:"primary_tag,omitempty"`

	// The resource name.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	RowType *string `json:"rowType,omitempty" tf:"row_type,omitempty"`

	// The service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type QueryTableDefinitionRequestApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []RequestApmStatsQueryColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type QueryTableDefinitionRequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []QueryTableDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []QueryTableDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []QueryTableDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type QueryTableDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryTableDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []QueryTableDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []QueryTableDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type QueryTableDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type QueryTableDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type QueryTableDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryTableDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryTableDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryTableDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryTableDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestObservation struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	ApmQuery []QueryTableDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	ApmStatsQuery []QueryTableDefinitionRequestApmStatsQueryObservation `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []RequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []QueryTableDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	LogQuery []QueryTableDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []QueryTableDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []QueryTableDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []QueryTableDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []QueryTableDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryTableDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []QueryTableDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []QueryTableDefinitionRequestApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []RequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []QueryTableDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []QueryTableDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryTableDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryTableDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []QueryTableDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []QueryTableDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryTableDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryTableDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []RequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []RequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []QueryTableDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []QueryTableDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []QueryTableDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryTableDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryTableDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []QueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []QueryTableDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []QueryTableDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []QueryTableDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []QueryTableDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryTableDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryTableDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryTableDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryTableDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryTableDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryTableDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryTableDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryTableDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryTableDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryTableDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryTableDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryTableDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryTableDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryTableDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryTableDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryValueDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryValueDefinitionObservation struct {

	// A Boolean indicating whether to automatically scale the tile.
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []QueryValueDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	Request []QueryValueDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// Set a timeseries on the widget background.
	TimeseriesBackground []TimeseriesBackgroundObservation `json:"timeseriesBackground,omitempty" tf:"timeseries_background,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryValueDefinitionParameters struct {

	// A Boolean indicating whether to automatically scale the tile.
	// +kubebuilder:validation:Optional
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []QueryValueDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []QueryValueDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// Set a timeseries on the widget background.
	// +kubebuilder:validation:Optional
	TimeseriesBackground []TimeseriesBackgroundParameters `json:"timeseriesBackground,omitempty" tf:"timeseries_background,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryValueDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryValueDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryValueDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryValueDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryValueDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryValueDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryValueDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryValueDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryValueDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []QueryValueDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []QueryValueDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []QueryValueDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type QueryValueDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryValueDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []QueryValueDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []QueryValueDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type QueryValueDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type QueryValueDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type QueryValueDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryValueDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryValueDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryValueDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryValueDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestObservation struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []QueryValueDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []AuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []QueryValueDefinitionRequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []QueryValueDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []QueryValueDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []QueryValueDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []QueryValueDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []QueryValueDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []QueryValueDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryValueDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []QueryValueDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []AuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryValueDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []QueryValueDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []QueryValueDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryValueDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryValueDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []QueryValueDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []QueryValueDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryValueDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryValueDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []QueryValueDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryValueDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []QueryValueDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []QueryValueDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []QueryValueDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryValueDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryValueDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []QueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []QueryValueDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []QueryValueDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []QueryValueDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []QueryValueDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryValueDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryValueDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryValueDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryValueDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryValueDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryValueDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryValueDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryValueDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryValueDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryValueDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryValueDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryValueDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []QueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []QueryValueDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []QueryValueDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []QueryValueDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionTimeseriesBackgroundObservation struct {

	// Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	Yaxis []QueryValueDefinitionTimeseriesBackgroundYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type QueryValueDefinitionTimeseriesBackgroundParameters struct {

	// Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []QueryValueDefinitionTimeseriesBackgroundYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type QueryValueDefinitionTimeseriesBackgroundYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type QueryValueDefinitionTimeseriesBackgroundYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type RequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestApmStatsQueryColumnsObservation struct {

	// A user-assigned alias for the column.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestApmStatsQueryColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestApmStatsQueryObservation struct {

	// Column properties used by the front end for display.
	Columns []ApmStatsQueryColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The operation name associated with the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization's host group name and value.
	PrimaryTag *string `json:"primaryTag,omitempty" tf:"primary_tag,omitempty"`

	// The resource name.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	RowType *string `json:"rowType,omitempty" tf:"row_type,omitempty"`

	// The service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type RequestApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []ApmStatsQueryColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type RequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestColumnsObservation struct {

	// Widget column field.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// Widget column width. Valid values are `auto`, `compact`, `full`.
	Width *string `json:"width,omitempty" tf:"width,omitempty"`
}

type RequestColumnsParameters struct {

	// Widget column field.
	// +kubebuilder:validation:Required
	Field *string `json:"field" tf:"field,omitempty"`

	// Widget column width. Valid values are `auto`, `compact`, `full`.
	// +kubebuilder:validation:Required
	Width *string `json:"width" tf:"width,omitempty"`
}

type RequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type RequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type RequestFillApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestFillApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFillApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestFillApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestFillApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestFillApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestFillLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFillLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestFillLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestFillLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestFillLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillObservation struct {

	// The query to use for this widget.
	ApmQuery []RequestFillApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []RequestFillLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []RequestFillProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []RequestFillRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []RequestFillSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestFillParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestFillApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestFillLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestFillProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestFillRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestFillSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestFillProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestFillProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestFillRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestFillRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFillRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestFillRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestFillRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestFillRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestFillSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFillSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestFillSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestFillSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestFillSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type RequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type RequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []FormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []FormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []FormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type RequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []FormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []FormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []FormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type RequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type RequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type RequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []LogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []LogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestMetadataObservation struct {

	// The expression alias.
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`
}

type RequestMetadataParameters struct {

	// The expression alias.
	// +kubebuilder:validation:Optional
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

type RequestNetworkQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestNetworkQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestNetworkQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestNetworkQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestNetworkQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestNetworkQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestNetworkQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestObservation struct {

	// The query to use for this widget.
	ApmQuery []ApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	Formula []FormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	LogQuery []LogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []ProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []QueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []RumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []SecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type RequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	// +kubebuilder:validation:Optional
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	// +kubebuilder:validation:Optional
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []FormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	// +kubebuilder:validation:Optional
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []LogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	// +kubebuilder:validation:Optional
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	// +kubebuilder:validation:Optional
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type RequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type RequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type RequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []EventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []EventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []QueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []RequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []QueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type RequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []RequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type RequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []QueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []QueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []QueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []QueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []RequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestQuerySortObservation struct {

	// The facet path for the column.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestQuerySortParameters struct {

	// The facet path for the column.
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestScatterplotTableFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`
}

type RequestScatterplotTableFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	// +kubebuilder:validation:Required
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`
}

type RequestScatterplotTableObservation struct {
	Formula []RequestScatterplotTableFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	Query []RequestScatterplotTableQueryObservation `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestScatterplotTableParameters struct {

	// +kubebuilder:validation:Optional
	Formula []RequestScatterplotTableFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []RequestScatterplotTableQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestScatterplotTableQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []RequestScatterplotTableQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []RequestScatterplotTableQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestScatterplotTableQueryEventQueryObservation struct {

	// The compute options.
	Compute []RequestScatterplotTableQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []RequestScatterplotTableQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []RequestScatterplotTableQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type RequestScatterplotTableQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []RequestScatterplotTableQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []RequestScatterplotTableQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []RequestScatterplotTableQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type RequestScatterplotTableQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []RequestScatterplotTableQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []RequestScatterplotTableQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []RequestScatterplotTableQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []RequestScatterplotTableQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []RequestScatterplotTableQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestScatterplotTableQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []RequestScatterplotTableQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []RequestScatterplotTableQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []RequestScatterplotTableQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []RequestScatterplotTableQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestScatterplotTableQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestScatterplotTableQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestScatterplotTableQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestSizeApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestSizeApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestSizeApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestSizeApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestSizeApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestSizeLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestSizeLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestSizeLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestSizeLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestSizeLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeObservation struct {

	// The query to use for this widget.
	ApmQuery []RequestSizeApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []RequestSizeLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []RequestSizeProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []RequestSizeRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []RequestSizeSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestSizeParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestSizeApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestSizeLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestSizeProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestSizeRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestSizeSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestSizeProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestSizeProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestSizeRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestSizeRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestSizeRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestSizeRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestSizeRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestSizeRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestSizeSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestSizeSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestSizeSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestSizeSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestSizeSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type RequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type RequestXApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestXApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestXApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestXApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestXApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestXApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestXLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestXLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestXLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestXLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestXLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXObservation struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []RequestXApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []RequestXLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []RequestXProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []RequestXRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []RequestXSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestXParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestXApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestXLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestXProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestXRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestXSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestXProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestXProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestXRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestXRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestXRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestXRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestXRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestXRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestXSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestXSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestXSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestXSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestXSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestYApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestYApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestYApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestYApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestYApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestYLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestYLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestYLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestYLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestYLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYObservation struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []RequestYApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []RequestYLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []RequestYProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []RequestYRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []RequestYSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestYParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestYApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestYLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestYProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestYRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestYSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestYProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestYProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestYRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestYRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestYRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestYRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestYRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestYRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RequestYSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestYSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RequestYSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RequestYSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RequestYSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RightYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type RightYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type RumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []RumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []RumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []RumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []RumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RunWorkflowDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type RunWorkflowDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type RunWorkflowDefinitionInputObservation struct {

	// Name of the workflow input.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Dashboard template variable. Can be suffixed with `.value` or `.key`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RunWorkflowDefinitionInputParameters struct {

	// Name of the workflow input.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Dashboard template variable. Can be suffixed with `.value` or `.key`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type RunWorkflowDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []RunWorkflowDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Array of workflow inputs to map to dashboard template variables.
	Input []InputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Workflow ID
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

type RunWorkflowDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []RunWorkflowDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Array of workflow inputs to map to dashboard template variables.
	// +kubebuilder:validation:Optional
	Input []InputParameters `json:"input,omitempty" tf:"input,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Workflow ID
	// +kubebuilder:validation:Required
	WorkflowID *string `json:"workflowId" tf:"workflow_id,omitempty"`
}

type SLOListDefinitionObservation struct {

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed.
	Request []SLOListDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SLOListDefinitionParameters struct {

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed.
	// +kubebuilder:validation:Required
	Request []SLOListDefinitionRequestParameters `json:"request" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SLOListDefinitionRequestObservation struct {

	// Updated SLO List widget.
	Query []SLOListDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The request type for the SLO List request. Valid values are `slo_list`.
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`
}

type SLOListDefinitionRequestParameters struct {

	// Updated SLO List widget.
	// +kubebuilder:validation:Required
	Query []SLOListDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// The request type for the SLO List request. Valid values are `slo_list`.
	// +kubebuilder:validation:Required
	RequestType *string `json:"requestType" tf:"request_type,omitempty"`
}

type SLOListDefinitionRequestQueryObservation struct {

	// Maximum number of results to display in the table.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Widget query.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "status.sli", "order": "desc"}`.
	Sort []QuerySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type SLOListDefinitionRequestQueryParameters struct {

	// Maximum number of results to display in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Widget query.
	// +kubebuilder:validation:Required
	QueryString *string `json:"queryString" tf:"query_string,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "status.sli", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []QuerySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ScatterplotDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ScatterplotDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ScatterplotDefinitionObservation struct {

	// List of groups used for colors.
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []ScatterplotDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	Request []ScatterplotDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	Xaxis []XaxisObservation `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	Yaxis []ScatterplotDefinitionYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type ScatterplotDefinitionParameters struct {

	// List of groups used for colors.
	// +kubebuilder:validation:Optional
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ScatterplotDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []ScatterplotDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Xaxis []XaxisParameters `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []ScatterplotDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type ScatterplotDefinitionRequestObservation struct {

	// Scatterplot request containing formulas and functions.
	ScatterplotTable []ScatterplotTableObservation `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	X []XObservation `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	Y []YObservation `json:"y,omitempty" tf:"y,omitempty"`
}

type ScatterplotDefinitionRequestParameters struct {

	// Scatterplot request containing formulas and functions.
	// +kubebuilder:validation:Optional
	ScatterplotTable []ScatterplotTableParameters `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	X []XParameters `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	Y []YParameters `json:"y,omitempty" tf:"y,omitempty"`
}

type ScatterplotDefinitionXaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotDefinitionXaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotDefinitionYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotTableFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`
}

type ScatterplotTableFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	// +kubebuilder:validation:Required
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`
}

type ScatterplotTableObservation struct {
	Formula []ScatterplotTableFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	Query []ScatterplotTableQueryObservation `json:"query,omitempty" tf:"query,omitempty"`
}

type ScatterplotTableParameters struct {

	// +kubebuilder:validation:Optional
	Formula []ScatterplotTableFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ScatterplotTableQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type ScatterplotTableQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ScatterplotTableQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ScatterplotTableQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ScatterplotTableQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ScatterplotTableQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ScatterplotTableQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []ScatterplotTableQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []ScatterplotTableQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ScatterplotTableQueryEventQueryObservation struct {

	// The compute options.
	Compute []ScatterplotTableQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []ScatterplotTableQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []ScatterplotTableQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ScatterplotTableQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ScatterplotTableQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []ScatterplotTableQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []ScatterplotTableQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ScatterplotTableQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ScatterplotTableQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ScatterplotTableQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ScatterplotTableQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ScatterplotTableQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []ScatterplotTableQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []ScatterplotTableQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []ScatterplotTableQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []ScatterplotTableQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []ScatterplotTableQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ScatterplotTableQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ScatterplotTableQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ScatterplotTableQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []ScatterplotTableQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []ScatterplotTableQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ScatterplotTableQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ScatterplotTableQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ScatterplotTableQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type SearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ServiceLevelObjectiveDefinitionObservation struct {

	// Additional filters applied to the SLO query.
	AdditionalQueryFilters *string `json:"additionalQueryFilters,omitempty" tf:"additional_query_filters,omitempty"`

	// The global time target of the widget.
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	SLOID *string `json:"sloId,omitempty" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	TimeWindows []*string `json:"timeWindows,omitempty" tf:"time_windows,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	ViewMode *string `json:"viewMode,omitempty" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	ViewType *string `json:"viewType,omitempty" tf:"view_type,omitempty"`
}

type ServiceLevelObjectiveDefinitionParameters struct {

	// Additional filters applied to the SLO query.
	// +kubebuilder:validation:Optional
	AdditionalQueryFilters *string `json:"additionalQueryFilters,omitempty" tf:"additional_query_filters,omitempty"`

	// The global time target of the widget.
	// +kubebuilder:validation:Optional
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	// +kubebuilder:validation:Required
	SLOID *string `json:"sloId" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	// +kubebuilder:validation:Optional
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	// +kubebuilder:validation:Required
	ViewMode *string `json:"viewMode" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	// +kubebuilder:validation:Required
	ViewType *string `json:"viewType" tf:"view_type,omitempty"`
}

type ServicemapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ServicemapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ServicemapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []ServicemapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// The ID of the service to map.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ServicemapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ServicemapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SizeApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SizeApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SizeApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SizeApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SizeApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SizeApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SizeLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SizeLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SizeLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SizeLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SizeLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeObservation struct {

	// The query to use for this widget.
	ApmQuery []SizeApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []SizeLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []SizeProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []SizeRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []SizeSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SizeParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []SizeApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []SizeLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []SizeProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []SizeRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SizeSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SizeProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SizeProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SizeRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SizeRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SizeRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SizeRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SizeRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SizeRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SizeSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SizeSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SizeSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SizeSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SizeSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type StyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type StyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type SunburstDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type SunburstDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type SunburstDefinitionLegendInlineObservation struct {

	// Whether to hide the percentages of the groups.
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SunburstDefinitionLegendInlineParameters struct {

	// Whether to hide the percentages of the groups.
	// +kubebuilder:validation:Optional
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SunburstDefinitionLegendTableObservation struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SunburstDefinitionLegendTableParameters struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SunburstDefinitionObservation struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	CustomLink []SunburstDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	LegendInline []LegendInlineObservation `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	LegendTable []LegendTableObservation `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	Request []SunburstDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SunburstDefinitionParameters struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []SunburstDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	// +kubebuilder:validation:Optional
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	// +kubebuilder:validation:Optional
	LegendInline []LegendInlineParameters `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	// +kubebuilder:validation:Optional
	LegendTable []LegendTableParameters `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []SunburstDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SunburstDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type SunburstDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type SunburstDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []SunburstDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []SunburstDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []SunburstDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type SunburstDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []SunburstDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []SunburstDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []SunburstDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type SunburstDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type SunburstDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type SunburstDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestNetworkQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestNetworkQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestNetworkQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestNetworkQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []SunburstDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []RequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	Formula []SunburstDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []SunburstDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	NetworkQuery []NetworkQueryObservation `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []SunburstDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []SunburstDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []SunburstDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []SunburstDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SunburstDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []SunburstDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []RequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []SunburstDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []SunburstDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []NetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []SunburstDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []SunburstDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []SunburstDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SunburstDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SunburstDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SunburstDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SunburstDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []SunburstDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []SunburstDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []SunburstDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []SunburstDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []SunburstDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []SunburstDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []SunburstDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type SunburstDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []SunburstDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []SunburstDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []SunburstDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []SunburstDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []SunburstDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type SunburstDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []SunburstDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []SunburstDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []SunburstDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []SunburstDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []SunburstDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type SunburstDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type SunburstDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type SunburstDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []SunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []SunburstDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []SunburstDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []SunburstDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TemplateVariableObservation struct {

	// The list of values that the template variable drop-down is be limited to
	AvailableValues []*string `json:"availableValues,omitempty" tf:"available_values,omitempty"`

	// The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
	Defaults []*string `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// The name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type TemplateVariableParameters struct {

	// The list of values that the template variable drop-down is be limited to
	// +kubebuilder:validation:Optional
	AvailableValues []*string `json:"availableValues,omitempty" tf:"available_values,omitempty"`

	// The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
	// +kubebuilder:validation:Optional
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
	// +kubebuilder:validation:Optional
	Defaults []*string `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// The name of the variable.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type TemplateVariablePresetObservation struct {

	// The name of the preset.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The template variable names and assumed values under the given preset
	TemplateVariable []TemplateVariablePresetTemplateVariableObservation `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`
}

type TemplateVariablePresetParameters struct {

	// The name of the preset.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The template variable names and assumed values under the given preset
	// +kubebuilder:validation:Optional
	TemplateVariable []TemplateVariablePresetTemplateVariableParameters `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`
}

type TemplateVariablePresetTemplateVariableObservation struct {

	// The name of the template variable
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TemplateVariablePresetTemplateVariableParameters struct {

	// The name of the template variable
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TimeseriesBackgroundObservation struct {

	// Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	Yaxis []TimeseriesBackgroundYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type TimeseriesBackgroundParameters struct {

	// Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []TimeseriesBackgroundYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type TimeseriesBackgroundYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesBackgroundYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type TimeseriesDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type TimeseriesDefinitionEventObservation struct {

	// The event query to use in the widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type TimeseriesDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type TimeseriesDefinitionMarkerObservation struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TimeseriesDefinitionMarkerParameters struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type TimeseriesDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []TimeseriesDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	Event []TimeseriesDefinitionEventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	Marker []MarkerObservation `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	Request []TimeseriesDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	RightYaxis []RightYaxisObservation `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	Yaxis []TimeseriesDefinitionYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type TimeseriesDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []TimeseriesDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []TimeseriesDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	// +kubebuilder:validation:Optional
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	// +kubebuilder:validation:Optional
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	// +kubebuilder:validation:Optional
	Marker []MarkerParameters `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []TimeseriesDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	RightYaxis []RightYaxisParameters `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []TimeseriesDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TimeseriesDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type TimeseriesDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []TimeseriesDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []TimeseriesDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []TimeseriesDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type TimeseriesDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []TimeseriesDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []TimeseriesDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []TimeseriesDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type TimeseriesDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type TimeseriesDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestNetworkQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestNetworkQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestNetworkQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []TimeseriesDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []TimeseriesDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	Formula []TimeseriesDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []TimeseriesDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	NetworkQuery []RequestNetworkQueryObservation `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []TimeseriesDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []TimeseriesDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []TimeseriesDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []TimeseriesDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	Style []TimeseriesDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type TimeseriesDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []TimeseriesDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []TimeseriesDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []TimeseriesDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []TimeseriesDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []RequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	// +kubebuilder:validation:Optional
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []TimeseriesDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []TimeseriesDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []TimeseriesDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []TimeseriesDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []TimeseriesDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type TimeseriesDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type TimeseriesDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []TimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []TimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []TimeseriesDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []TimeseriesDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []TimeseriesDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []TimeseriesDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []TimeseriesDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []TimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []TimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []TimeseriesDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []TimeseriesDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []TimeseriesDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type TimeseriesDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []TimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []TimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []TimeseriesDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []TimeseriesDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []TimeseriesDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type TimeseriesDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type TimeseriesDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []TimeseriesDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []TimeseriesDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []TimeseriesDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestStyleObservation struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type TimeseriesDefinitionRequestStyleParameters struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	// +kubebuilder:validation:Optional
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	// +kubebuilder:validation:Optional
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type TimeseriesDefinitionRightYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesDefinitionRightYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesDefinitionYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ToplistDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ToplistDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ToplistDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []ToplistDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	Request []ToplistDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ToplistDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ToplistDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []ToplistDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ToplistDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ToplistDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ToplistDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ToplistDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ToplistDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ToplistDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ToplistDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ToplistDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ToplistDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ToplistDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ToplistDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ToplistDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ToplistDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []ToplistDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []ToplistDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []ToplistDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type ToplistDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ToplistDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []ToplistDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []ToplistDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type ToplistDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type ToplistDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type ToplistDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ToplistDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ToplistDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ToplistDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ToplistDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []ToplistDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []ToplistDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []ToplistDefinitionRequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []ToplistDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []ToplistDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []ToplistDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []ToplistDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []ToplistDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []ToplistDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	Style []ToplistDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type ToplistDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ToplistDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []ToplistDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ToplistDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []ToplistDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []ToplistDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ToplistDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ToplistDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []ToplistDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []ToplistDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	// +kubebuilder:validation:Optional
	Style []ToplistDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type ToplistDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ToplistDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ToplistDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []ToplistDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []ToplistDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []ToplistDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []ToplistDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []ToplistDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ToplistDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []ToplistDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ToplistDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []ToplistDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []ToplistDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []ToplistDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []ToplistDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []ToplistDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ToplistDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ToplistDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ToplistDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []ToplistDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []ToplistDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ToplistDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ToplistDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ToplistDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ToplistDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ToplistDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ToplistDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ToplistDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ToplistDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []ToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []ToplistDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []ToplistDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []ToplistDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type ToplistDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type TopologyMapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type TopologyMapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type TopologyMapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []TopologyMapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (`query` and `request_type` are required within the request).
	Request []TopologyMapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type TopologyMapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []TopologyMapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (`query` and `request_type` are required within the request).
	// +kubebuilder:validation:Optional
	Request []TopologyMapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type TopologyMapDefinitionRequestObservation struct {

	// The query for a Topology request.
	Query []TopologyMapDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The request type for the Topology request ('topology'). Valid values are `topology`.
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`
}

type TopologyMapDefinitionRequestParameters struct {

	// The query for a Topology request.
	// +kubebuilder:validation:Required
	Query []TopologyMapDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// The request type for the Topology request ('topology'). Valid values are `topology`.
	// +kubebuilder:validation:Required
	RequestType *string `json:"requestType" tf:"request_type,omitempty"`
}

type TopologyMapDefinitionRequestQueryObservation struct {

	// The data source for the Topology request ('service_map' or 'data_streams'). Valid values are `data_streams`, `service_map`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// The ID of the service to map.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type TopologyMapDefinitionRequestQueryParameters struct {

	// The data source for the Topology request ('service_map' or 'data_streams'). Valid values are `data_streams`, `service_map`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type TraceServiceDefinitionObservation struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	SpanName *string `json:"spanName,omitempty" tf:"span_name,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type TraceServiceDefinitionParameters struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	// +kubebuilder:validation:Optional
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	// +kubebuilder:validation:Optional
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	// +kubebuilder:validation:Optional
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	// +kubebuilder:validation:Optional
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	// +kubebuilder:validation:Optional
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	// +kubebuilder:validation:Optional
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	// +kubebuilder:validation:Optional
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	// +kubebuilder:validation:Required
	SpanName *string `json:"spanName" tf:"span_name,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type TreemapDefinitionObservation struct {

	// Nested block describing the request to use when displaying the widget.
	Request []TreemapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TreemapDefinitionParameters struct {

	// Nested block describing the request to use when displaying the widget.
	// +kubebuilder:validation:Optional
	Request []TreemapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TreemapDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TreemapDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type TreemapDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TreemapDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TreemapDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []TreemapDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []TreemapDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []TreemapDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type TreemapDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []TreemapDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []TreemapDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []TreemapDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type TreemapDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type TreemapDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type TreemapDefinitionRequestObservation struct {
	Formula []TreemapDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	Query []TreemapDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`
}

type TreemapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []TreemapDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []TreemapDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type TreemapDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type TreemapDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TreemapDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type TreemapDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []TreemapDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []TreemapDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []TreemapDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []TreemapDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []TreemapDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type TreemapDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []TreemapDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []TreemapDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []TreemapDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type TreemapDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type TreemapDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TreemapDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type TreemapDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TreemapDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []TreemapDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []TreemapDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []TreemapDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []TreemapDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []TreemapDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type TreemapDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []TreemapDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []TreemapDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []TreemapDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []TreemapDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []TreemapDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type TreemapDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type TreemapDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ViewObservation struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	Focus *string `json:"focus,omitempty" tf:"focus,omitempty"`
}

type ViewParameters struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	// +kubebuilder:validation:Required
	Focus *string `json:"focus" tf:"focus,omitempty"`
}

type WidgetAlertGraphDefinitionObservation struct {

	// The ID of the monitor used by the widget.
	AlertID *string `json:"alertId,omitempty" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	VizType *string `json:"vizType,omitempty" tf:"viz_type,omitempty"`
}

type WidgetAlertGraphDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	// +kubebuilder:validation:Required
	VizType *string `json:"vizType" tf:"viz_type,omitempty"`
}

type WidgetAlertValueDefinitionObservation struct {

	// The ID of the monitor used by the widget.
	AlertID *string `json:"alertId,omitempty" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type WidgetAlertValueDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type WidgetChangeDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []ChangeDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []ChangeDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetChangeDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ChangeDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []ChangeDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetCheckStatusDefinitionObservation struct {

	// The check to use in the widget.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// The check group to use in the widget.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	Grouping *string `json:"grouping,omitempty" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetCheckStatusDefinitionParameters struct {

	// The check to use in the widget.
	// +kubebuilder:validation:Required
	Check *string `json:"check" tf:"check,omitempty"`

	// The check group to use in the widget.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	// +kubebuilder:validation:Required
	Grouping *string `json:"grouping" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetDistributionDefinitionObservation struct {

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []WidgetDistributionDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetDistributionDefinitionParameters struct {

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []WidgetDistributionDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetDistributionDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []DistributionDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	ApmStatsQuery []RequestApmStatsQueryObservation `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// The query to use for this widget.
	LogQuery []DistributionDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []DistributionDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []DistributionDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []DistributionDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []DistributionDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetDistributionDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []DistributionDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []RequestApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []DistributionDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []DistributionDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []DistributionDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []DistributionDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []DistributionDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetEventStreamDefinitionObservation struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetEventStreamDefinitionParameters struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetEventTimelineDefinitionObservation struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetEventTimelineDefinitionParameters struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetFreeTextDefinitionObservation struct {

	// The color of the text in the widget.
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type WidgetFreeTextDefinitionParameters struct {

	// The color of the text in the widget.
	// +kubebuilder:validation:Optional
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type WidgetGeomapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetGeomapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetGeomapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetGeomapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	Request []WidgetGeomapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []WidgetGeomapDefinitionStyleObservation `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	View []GeomapDefinitionViewObservation `json:"view,omitempty" tf:"view,omitempty"`
}

type WidgetGeomapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetGeomapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetGeomapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetGeomapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	// +kubebuilder:validation:Required
	View []GeomapDefinitionViewParameters `json:"view" tf:"view,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []GeomapDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GeomapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetGeomapDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetGeomapDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetGeomapDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetGeomapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetGeomapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetGeomapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionRequestObservation struct {
	Formula []GeomapDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetGeomapDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []GeomapDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetGeomapDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type WidgetGeomapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []GeomapDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetGeomapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []GeomapDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetGeomapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetGeomapDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetGeomapDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetGeomapDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetGeomapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetGeomapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetGeomapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionStyleObservation struct {

	// The color palette to apply to the widget.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type WidgetGeomapDefinitionStyleParameters struct {

	// The color palette to apply to the widget.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Required
	PaletteFlip *bool `json:"paletteFlip" tf:"palette_flip,omitempty"`
}

type WidgetHeatmapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHeatmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHeatmapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetHeatmapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	Event []HeatmapDefinitionEventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Request []WidgetHeatmapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	Yaxis []HeatmapDefinitionYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetHeatmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetHeatmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []HeatmapDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []WidgetHeatmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []HeatmapDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetHeatmapDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetHeatmapDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetHeatmapDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetHeatmapDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetHeatmapDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetHeatmapDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []WidgetHeatmapDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetHeatmapDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetHeatmapDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetHeatmapDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetHeatmapDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []WidgetHeatmapDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetHeatmapDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetHeatmapDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetHeatmapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetHeatmapDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetHeatmapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetHeatmapDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetHeatmapDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetHeatmapDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetHeatmapDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetHeatmapDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetHeatmapDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetHeatmapDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetHeatmapDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetHeatmapDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetHostmapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHostmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHostmapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetHostmapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	Request []WidgetHostmapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	Style []WidgetHostmapDefinitionStyleObservation `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetHostmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetHostmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	// +kubebuilder:validation:Optional
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	// +kubebuilder:validation:Optional
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []WidgetHostmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetHostmapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetHostmapDefinitionRequestObservation struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Fill []RequestFillObservation `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	Size []RequestSizeObservation `json:"size,omitempty" tf:"size,omitempty"`
}

type WidgetHostmapDefinitionRequestParameters struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Fill []RequestFillParameters `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Size []RequestSizeParameters `json:"size,omitempty" tf:"size,omitempty"`
}

type WidgetHostmapDefinitionStyleObservation struct {

	// The max value to use to color the map.
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type WidgetHostmapDefinitionStyleParameters struct {

	// The max value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Optional
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type WidgetIframeDefinitionObservation struct {

	// The URL to use as a data source for the widget.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type WidgetIframeDefinitionParameters struct {

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type WidgetImageDefinitionObservation struct {

	// Whether to display a background or not.
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetImageDefinitionParameters struct {

	// Whether to display a background or not.
	// +kubebuilder:validation:Optional
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	// +kubebuilder:validation:Optional
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	// +kubebuilder:validation:Optional
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	// +kubebuilder:validation:Optional
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	// +kubebuilder:validation:Optional
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetLayoutObservation struct {

	// The height of the widget.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type WidgetLayoutParameters struct {

	// The height of the widget.
	// +kubebuilder:validation:Required
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	// +kubebuilder:validation:Optional
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	// +kubebuilder:validation:Required
	Width *float64 `json:"width" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	X *float64 `json:"x" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	Y *float64 `json:"y" tf:"y,omitempty"`
}

type WidgetListStreamDefinitionObservation struct {

	// Nested block describing the requests to use when displaying the widget. Multiple `request` blocks are allowed with the structure below.
	Request []WidgetListStreamDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetListStreamDefinitionParameters struct {

	// Nested block describing the requests to use when displaying the widget. Multiple `request` blocks are allowed with the structure below.
	// +kubebuilder:validation:Required
	Request []WidgetListStreamDefinitionRequestParameters `json:"request" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetListStreamDefinitionRequestObservation struct {

	// Widget columns.
	Columns []ListStreamDefinitionRequestColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// Updated list stream widget.
	Query []WidgetListStreamDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// Widget response format. Valid values are `event_list`.
	ResponseFormat *string `json:"responseFormat,omitempty" tf:"response_format,omitempty"`
}

type WidgetListStreamDefinitionRequestParameters struct {

	// Widget columns.
	// +kubebuilder:validation:Required
	Columns []ListStreamDefinitionRequestColumnsParameters `json:"columns" tf:"columns,omitempty"`

	// Updated list stream widget.
	// +kubebuilder:validation:Required
	Query []WidgetListStreamDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// Widget response format. Valid values are `event_list`.
	// +kubebuilder:validation:Required
	ResponseFormat *string `json:"responseFormat" tf:"response_format,omitempty"`
}

type WidgetListStreamDefinitionRequestQueryObservation struct {

	// Source from which to query items to display in the stream. Valid values are `logs_stream`, `audit_stream`, `ci_pipeline_stream`, `ci_test_stream`, `rum_issue_stream`, `apm_issue_stream`, `logs_issue_stream`, `logs_pattern_stream`, `logs_transaction_stream`, `event_stream`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Size of events displayed in widget. Required if `data_source` is `event_stream`. Valid values are `s`, `l`.
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// List of indexes.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// Widget query.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetListStreamDefinitionRequestQueryParameters struct {

	// Source from which to query items to display in the stream. Valid values are `logs_stream`, `audit_stream`, `ci_pipeline_stream`, `ci_test_stream`, `rum_issue_stream`, `apm_issue_stream`, `logs_issue_stream`, `logs_pattern_stream`, `logs_transaction_stream`, `event_stream`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Size of events displayed in widget. Required if `data_source` is `event_stream`. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// List of indexes.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// Widget query.
	// +kubebuilder:validation:Optional
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetLogStreamDefinitionObservation struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	Sort []WidgetLogStreamDefinitionSortObservation `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetLogStreamDefinitionParameters struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	// +kubebuilder:validation:Optional
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	// +kubebuilder:validation:Optional
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	// +kubebuilder:validation:Optional
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []WidgetLogStreamDefinitionSortParameters `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetLogStreamDefinitionSortObservation struct {

	// The facet path for the column.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetLogStreamDefinitionSortParameters struct {

	// The facet path for the column.
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetManageStatusDefinitionObservation struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// Whether to show the priorities column.
	ShowPriority *bool `json:"showPriority,omitempty" tf:"show_priority,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`, `priority,asc`, `priority,desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetManageStatusDefinitionParameters struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	// +kubebuilder:validation:Optional
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	// +kubebuilder:validation:Optional
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	// +kubebuilder:validation:Optional
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// Whether to show the priorities column.
	// +kubebuilder:validation:Optional
	ShowPriority *bool `json:"showPriority,omitempty" tf:"show_priority,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`, `priority,asc`, `priority,desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	// +kubebuilder:validation:Optional
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetNoteDefinitionObservation struct {

	// The background color of the note.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The size of the text.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetNoteDefinitionParameters struct {

	// The background color of the note.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The size of the text.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	// +kubebuilder:validation:Optional
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	// +kubebuilder:validation:Optional
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	// +kubebuilder:validation:Optional
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	// +kubebuilder:validation:Optional
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetObservation struct {

	// The definition for a Alert Graph widget.
	AlertGraphDefinition []AlertGraphDefinitionObservation `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	AlertValueDefinition []AlertValueDefinitionObservation `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	ChangeDefinition []ChangeDefinitionObservation `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	CheckStatusDefinition []CheckStatusDefinitionObservation `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	DistributionDefinition []DistributionDefinitionObservation `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	EventStreamDefinition []EventStreamDefinitionObservation `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	EventTimelineDefinition []EventTimelineDefinitionObservation `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	FreeTextDefinition []FreeTextDefinitionObservation `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	GeomapDefinition []GeomapDefinitionObservation `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Group widget.
	GroupDefinition []GroupDefinitionObservation `json:"groupDefinition,omitempty" tf:"group_definition,omitempty"`

	// The definition for a Heatmap widget.
	HeatmapDefinition []WidgetHeatmapDefinitionObservation `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	HostmapDefinition []WidgetHostmapDefinitionObservation `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The ID of the widget.
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// The definition for an Iframe widget.
	IframeDefinition []WidgetIframeDefinitionObservation `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	ImageDefinition []WidgetImageDefinitionObservation `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for a List Stream widget.
	ListStreamDefinition []WidgetListStreamDefinitionObservation `json:"listStreamDefinition,omitempty" tf:"list_stream_definition,omitempty"`

	// The definition for an Log Stream widget.
	LogStreamDefinition []WidgetLogStreamDefinitionObservation `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	ManageStatusDefinition []WidgetManageStatusDefinitionObservation `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	NoteDefinition []WidgetNoteDefinitionObservation `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	QueryTableDefinition []WidgetQueryTableDefinitionObservation `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	QueryValueDefinition []WidgetQueryValueDefinitionObservation `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
	RunWorkflowDefinition []WidgetRunWorkflowDefinitionObservation `json:"runWorkflowDefinition,omitempty" tf:"run_workflow_definition,omitempty"`

	// The definition for an SLO (Service Level Objective) List widget.
	SLOListDefinition []WidgetSLOListDefinitionObservation `json:"sloListDefinition,omitempty" tf:"slo_list_definition,omitempty"`

	// The definition for a Scatterplot widget.
	ScatterplotDefinition []WidgetScatterplotDefinitionObservation `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	ServiceLevelObjectiveDefinition []WidgetServiceLevelObjectiveDefinitionObservation `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	ServicemapDefinition []WidgetServicemapDefinitionObservation `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	SunburstDefinition []WidgetSunburstDefinitionObservation `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	TimeseriesDefinition []WidgetTimeseriesDefinitionObservation `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	ToplistDefinition []WidgetToplistDefinitionObservation `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Topology Map widget.
	TopologyMapDefinition []WidgetTopologyMapDefinitionObservation `json:"topologyMapDefinition,omitempty" tf:"topology_map_definition,omitempty"`

	// The definition for a Trace Service widget.
	TraceServiceDefinition []WidgetTraceServiceDefinitionObservation `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The definition for a Treemap widget.
	TreemapDefinition []WidgetTreemapDefinitionObservation `json:"treemapDefinition,omitempty" tf:"treemap_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	WidgetLayout []WidgetWidgetLayoutObservation `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type WidgetParameters struct {

	// The definition for a Alert Graph widget.
	// +kubebuilder:validation:Optional
	AlertGraphDefinition []AlertGraphDefinitionParameters `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	// +kubebuilder:validation:Optional
	AlertValueDefinition []AlertValueDefinitionParameters `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	// +kubebuilder:validation:Optional
	ChangeDefinition []ChangeDefinitionParameters `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	// +kubebuilder:validation:Optional
	CheckStatusDefinition []CheckStatusDefinitionParameters `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	// +kubebuilder:validation:Optional
	DistributionDefinition []DistributionDefinitionParameters `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	// +kubebuilder:validation:Optional
	EventStreamDefinition []EventStreamDefinitionParameters `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	// +kubebuilder:validation:Optional
	EventTimelineDefinition []EventTimelineDefinitionParameters `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	// +kubebuilder:validation:Optional
	FreeTextDefinition []FreeTextDefinitionParameters `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	// +kubebuilder:validation:Optional
	GeomapDefinition []GeomapDefinitionParameters `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Group widget.
	// +kubebuilder:validation:Optional
	GroupDefinition []GroupDefinitionParameters `json:"groupDefinition,omitempty" tf:"group_definition,omitempty"`

	// The definition for a Heatmap widget.
	// +kubebuilder:validation:Optional
	HeatmapDefinition []WidgetHeatmapDefinitionParameters `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	// +kubebuilder:validation:Optional
	HostmapDefinition []WidgetHostmapDefinitionParameters `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The definition for an Iframe widget.
	// +kubebuilder:validation:Optional
	IframeDefinition []WidgetIframeDefinitionParameters `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	// +kubebuilder:validation:Optional
	ImageDefinition []WidgetImageDefinitionParameters `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for a List Stream widget.
	// +kubebuilder:validation:Optional
	ListStreamDefinition []WidgetListStreamDefinitionParameters `json:"listStreamDefinition,omitempty" tf:"list_stream_definition,omitempty"`

	// The definition for an Log Stream widget.
	// +kubebuilder:validation:Optional
	LogStreamDefinition []WidgetLogStreamDefinitionParameters `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	// +kubebuilder:validation:Optional
	ManageStatusDefinition []WidgetManageStatusDefinitionParameters `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	// +kubebuilder:validation:Optional
	NoteDefinition []WidgetNoteDefinitionParameters `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	// +kubebuilder:validation:Optional
	QueryTableDefinition []WidgetQueryTableDefinitionParameters `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	// +kubebuilder:validation:Optional
	QueryValueDefinition []WidgetQueryValueDefinitionParameters `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
	// +kubebuilder:validation:Optional
	RunWorkflowDefinition []WidgetRunWorkflowDefinitionParameters `json:"runWorkflowDefinition,omitempty" tf:"run_workflow_definition,omitempty"`

	// The definition for an SLO (Service Level Objective) List widget.
	// +kubebuilder:validation:Optional
	SLOListDefinition []WidgetSLOListDefinitionParameters `json:"sloListDefinition,omitempty" tf:"slo_list_definition,omitempty"`

	// The definition for a Scatterplot widget.
	// +kubebuilder:validation:Optional
	ScatterplotDefinition []WidgetScatterplotDefinitionParameters `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	// +kubebuilder:validation:Optional
	ServiceLevelObjectiveDefinition []WidgetServiceLevelObjectiveDefinitionParameters `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	// +kubebuilder:validation:Optional
	ServicemapDefinition []WidgetServicemapDefinitionParameters `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	// +kubebuilder:validation:Optional
	SunburstDefinition []WidgetSunburstDefinitionParameters `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	// +kubebuilder:validation:Optional
	TimeseriesDefinition []WidgetTimeseriesDefinitionParameters `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	// +kubebuilder:validation:Optional
	ToplistDefinition []WidgetToplistDefinitionParameters `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Topology Map widget.
	// +kubebuilder:validation:Optional
	TopologyMapDefinition []WidgetTopologyMapDefinitionParameters `json:"topologyMapDefinition,omitempty" tf:"topology_map_definition,omitempty"`

	// The definition for a Trace Service widget.
	// +kubebuilder:validation:Optional
	TraceServiceDefinition []WidgetTraceServiceDefinitionParameters `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The definition for a Treemap widget.
	// +kubebuilder:validation:Optional
	TreemapDefinition []WidgetTreemapDefinitionParameters `json:"treemapDefinition,omitempty" tf:"treemap_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	// +kubebuilder:validation:Optional
	WidgetLayout []WidgetWidgetLayoutParameters `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type WidgetQueryTableDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryTableDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryTableDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetQueryTableDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	Request []WidgetQueryTableDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryTableDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetQueryTableDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	// +kubebuilder:validation:Optional
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetQueryTableDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryTableDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryTableDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryTableDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmStatsQueryObservation struct {

	// Column properties used by the front end for display.
	Columns []QueryTableDefinitionRequestApmStatsQueryColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The operation name associated with the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization's host group name and value.
	PrimaryTag *string `json:"primaryTag,omitempty" tf:"primary_tag,omitempty"`

	// The resource name.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	RowType *string `json:"rowType,omitempty" tf:"row_type,omitempty"`

	// The service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []QueryTableDefinitionRequestApmStatsQueryColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetQueryTableDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetQueryTableDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetQueryTableDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryTableDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetQueryTableDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetQueryTableDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryTableDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryTableDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryTableDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestObservation struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	ApmQuery []WidgetQueryTableDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	ApmStatsQuery []WidgetQueryTableDefinitionRequestApmStatsQueryObservation `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []QueryTableDefinitionRequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []WidgetQueryTableDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetQueryTableDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetQueryTableDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []WidgetQueryTableDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetQueryTableDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetQueryTableDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetQueryTableDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []WidgetQueryTableDefinitionRequestApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryTableDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetQueryTableDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetQueryTableDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryTableDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetQueryTableDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetQueryTableDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetQueryTableDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryTableDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []QueryTableDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryTableDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetQueryTableDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetQueryTableDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetQueryTableDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetQueryTableDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetQueryTableDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetQueryTableDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetQueryTableDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetQueryTableDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetQueryTableDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetQueryTableDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryTableDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryTableDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryTableDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryTableDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryTableDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryValueDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryValueDefinitionObservation struct {

	// A Boolean indicating whether to automatically scale the tile.
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetQueryValueDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	Request []WidgetQueryValueDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// Set a timeseries on the widget background.
	TimeseriesBackground []QueryValueDefinitionTimeseriesBackgroundObservation `json:"timeseriesBackground,omitempty" tf:"timeseries_background,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryValueDefinitionParameters struct {

	// A Boolean indicating whether to automatically scale the tile.
	// +kubebuilder:validation:Optional
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetQueryValueDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetQueryValueDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// Set a timeseries on the widget background.
	// +kubebuilder:validation:Optional
	TimeseriesBackground []QueryValueDefinitionTimeseriesBackgroundParameters `json:"timeseriesBackground,omitempty" tf:"timeseries_background,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryValueDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryValueDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryValueDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetQueryValueDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetQueryValueDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetQueryValueDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryValueDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetQueryValueDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetQueryValueDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryValueDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryValueDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryValueDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestObservation struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []WidgetQueryValueDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []QueryValueDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetQueryValueDefinitionRequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []WidgetQueryValueDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetQueryValueDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetQueryValueDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []WidgetQueryValueDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetQueryValueDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetQueryValueDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetQueryValueDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []QueryValueDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryValueDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetQueryValueDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetQueryValueDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryValueDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetQueryValueDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetQueryValueDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetQueryValueDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryValueDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetQueryValueDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetQueryValueDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetQueryValueDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetQueryValueDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetQueryValueDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetQueryValueDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetQueryValueDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetQueryValueDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetQueryValueDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetQueryValueDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryValueDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryValueDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryValueDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryValueDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetQueryValueDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetRunWorkflowDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetRunWorkflowDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetRunWorkflowDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetRunWorkflowDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Array of workflow inputs to map to dashboard template variables.
	Input []RunWorkflowDefinitionInputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Workflow ID
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

type WidgetRunWorkflowDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetRunWorkflowDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Array of workflow inputs to map to dashboard template variables.
	// +kubebuilder:validation:Optional
	Input []RunWorkflowDefinitionInputParameters `json:"input,omitempty" tf:"input,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Workflow ID
	// +kubebuilder:validation:Required
	WorkflowID *string `json:"workflowId" tf:"workflow_id,omitempty"`
}

type WidgetSLOListDefinitionObservation struct {

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed.
	Request []WidgetSLOListDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSLOListDefinitionParameters struct {

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed.
	// +kubebuilder:validation:Required
	Request []WidgetSLOListDefinitionRequestParameters `json:"request" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSLOListDefinitionRequestObservation struct {

	// Updated SLO List widget.
	Query []WidgetSLOListDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The request type for the SLO List request. Valid values are `slo_list`.
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`
}

type WidgetSLOListDefinitionRequestParameters struct {

	// Updated SLO List widget.
	// +kubebuilder:validation:Required
	Query []WidgetSLOListDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// The request type for the SLO List request. Valid values are `slo_list`.
	// +kubebuilder:validation:Required
	RequestType *string `json:"requestType" tf:"request_type,omitempty"`
}

type WidgetSLOListDefinitionRequestQueryObservation struct {

	// Maximum number of results to display in the table.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Widget query.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "status.sli", "order": "desc"}`.
	Sort []RequestQuerySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetSLOListDefinitionRequestQueryParameters struct {

	// Maximum number of results to display in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Widget query.
	// +kubebuilder:validation:Required
	QueryString *string `json:"queryString" tf:"query_string,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "status.sli", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []RequestQuerySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetScatterplotDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetScatterplotDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetScatterplotDefinitionObservation struct {

	// List of groups used for colors.
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetScatterplotDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	Request []WidgetScatterplotDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	Xaxis []ScatterplotDefinitionXaxisObservation `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	Yaxis []WidgetScatterplotDefinitionYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetScatterplotDefinitionParameters struct {

	// List of groups used for colors.
	// +kubebuilder:validation:Optional
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetScatterplotDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []WidgetScatterplotDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Xaxis []ScatterplotDefinitionXaxisParameters `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []WidgetScatterplotDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetScatterplotDefinitionRequestObservation struct {

	// Scatterplot request containing formulas and functions.
	ScatterplotTable []RequestScatterplotTableObservation `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	X []RequestXObservation `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	Y []RequestYObservation `json:"y,omitempty" tf:"y,omitempty"`
}

type WidgetScatterplotDefinitionRequestParameters struct {

	// Scatterplot request containing formulas and functions.
	// +kubebuilder:validation:Optional
	ScatterplotTable []RequestScatterplotTableParameters `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	X []RequestXParameters `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	Y []RequestYParameters `json:"y,omitempty" tf:"y,omitempty"`
}

type WidgetScatterplotDefinitionYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetScatterplotDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetServiceLevelObjectiveDefinitionObservation struct {

	// Additional filters applied to the SLO query.
	AdditionalQueryFilters *string `json:"additionalQueryFilters,omitempty" tf:"additional_query_filters,omitempty"`

	// The global time target of the widget.
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	SLOID *string `json:"sloId,omitempty" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	TimeWindows []*string `json:"timeWindows,omitempty" tf:"time_windows,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	ViewMode *string `json:"viewMode,omitempty" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	ViewType *string `json:"viewType,omitempty" tf:"view_type,omitempty"`
}

type WidgetServiceLevelObjectiveDefinitionParameters struct {

	// Additional filters applied to the SLO query.
	// +kubebuilder:validation:Optional
	AdditionalQueryFilters *string `json:"additionalQueryFilters,omitempty" tf:"additional_query_filters,omitempty"`

	// The global time target of the widget.
	// +kubebuilder:validation:Optional
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	// +kubebuilder:validation:Required
	SLOID *string `json:"sloId" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	// +kubebuilder:validation:Optional
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	// +kubebuilder:validation:Required
	ViewMode *string `json:"viewMode" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	// +kubebuilder:validation:Required
	ViewType *string `json:"viewType" tf:"view_type,omitempty"`
}

type WidgetServicemapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetServicemapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetServicemapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetServicemapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// The ID of the service to map.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetServicemapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetServicemapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSunburstDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetSunburstDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetSunburstDefinitionObservation struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	CustomLink []WidgetSunburstDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	LegendInline []SunburstDefinitionLegendInlineObservation `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	LegendTable []SunburstDefinitionLegendTableObservation `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	Request []WidgetSunburstDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSunburstDefinitionParameters struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetSunburstDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	// +kubebuilder:validation:Optional
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	// +kubebuilder:validation:Optional
	LegendInline []SunburstDefinitionLegendInlineParameters `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	// +kubebuilder:validation:Optional
	LegendTable []SunburstDefinitionLegendTableParameters `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetSunburstDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetSunburstDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetSunburstDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetSunburstDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetSunburstDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetSunburstDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetSunburstDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetSunburstDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetSunburstDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetSunburstDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetSunburstDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetSunburstDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetSunburstDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []WidgetSunburstDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []SunburstDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	Formula []WidgetSunburstDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetSunburstDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	NetworkQuery []SunburstDefinitionRequestNetworkQueryObservation `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetSunburstDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []WidgetSunburstDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetSunburstDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetSunburstDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetSunburstDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetSunburstDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []SunburstDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetSunburstDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetSunburstDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []SunburstDefinitionRequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetSunburstDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetSunburstDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetSunburstDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetSunburstDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetSunburstDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetSunburstDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetSunburstDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetSunburstDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetSunburstDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetSunburstDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetSunburstDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetSunburstDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetSunburstDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetSunburstDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetSunburstDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetSunburstDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetSunburstDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetSunburstDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetSunburstDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetSunburstDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetSunburstDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetSunburstDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetSunburstDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetTimeseriesDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetTimeseriesDefinitionEventObservation struct {

	// The event query to use in the widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type WidgetTimeseriesDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type WidgetTimeseriesDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetTimeseriesDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	Event []WidgetTimeseriesDefinitionEventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	Marker []TimeseriesDefinitionMarkerObservation `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	Request []WidgetTimeseriesDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	RightYaxis []TimeseriesDefinitionRightYaxisObservation `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	Yaxis []WidgetTimeseriesDefinitionYaxisObservation `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetTimeseriesDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetTimeseriesDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []WidgetTimeseriesDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	// +kubebuilder:validation:Optional
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	// +kubebuilder:validation:Optional
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	// +kubebuilder:validation:Optional
	Marker []TimeseriesDefinitionMarkerParameters `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetTimeseriesDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	RightYaxis []TimeseriesDefinitionRightYaxisParameters `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []WidgetTimeseriesDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetTimeseriesDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetTimeseriesDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetTimeseriesDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetTimeseriesDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetTimeseriesDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetTimeseriesDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetTimeseriesDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetTimeseriesDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetTimeseriesDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetTimeseriesDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetTimeseriesDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []WidgetTimeseriesDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []WidgetTimeseriesDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	Formula []WidgetTimeseriesDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetTimeseriesDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	Metadata []RequestMetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	NetworkQuery []TimeseriesDefinitionRequestNetworkQueryObservation `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetTimeseriesDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []WidgetTimeseriesDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetTimeseriesDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetTimeseriesDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	Style []WidgetTimeseriesDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTimeseriesDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetTimeseriesDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []WidgetTimeseriesDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetTimeseriesDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetTimeseriesDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Metadata []RequestMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []TimeseriesDefinitionRequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	// +kubebuilder:validation:Optional
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetTimeseriesDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetTimeseriesDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetTimeseriesDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetTimeseriesDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetTimeseriesDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTimeseriesDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetTimeseriesDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetTimeseriesDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetTimeseriesDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetTimeseriesDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetTimeseriesDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetTimeseriesDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetTimeseriesDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetTimeseriesDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetTimeseriesDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetTimeseriesDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetTimeseriesDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetTimeseriesDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetTimeseriesDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetTimeseriesDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetTimeseriesDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestStyleObservation struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetTimeseriesDefinitionRequestStyleParameters struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	// +kubebuilder:validation:Optional
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	// +kubebuilder:validation:Optional
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetTimeseriesDefinitionYaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetTimeseriesDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetToplistDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetToplistDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetToplistDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetToplistDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	Request []WidgetToplistDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetToplistDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetToplistDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetToplistDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetToplistDefinitionRequestApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetToplistDefinitionRequestApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetToplistDefinitionRequestApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetToplistDefinitionRequestApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetToplistDefinitionRequestAuditQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetToplistDefinitionRequestAuditQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetToplistDefinitionRequestAuditQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetToplistDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetToplistDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetToplistDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetToplistDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetToplistDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetToplistDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetToplistDefinitionRequestLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetToplistDefinitionRequestLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetToplistDefinitionRequestLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetToplistDefinitionRequestLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestObservation struct {

	// The query to use for this widget.
	ApmQuery []WidgetToplistDefinitionRequestApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	AuditQuery []WidgetToplistDefinitionRequestAuditQueryObservation `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetToplistDefinitionRequestConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	Formula []WidgetToplistDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	LogQuery []WidgetToplistDefinitionRequestLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []WidgetToplistDefinitionRequestProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	Query []WidgetToplistDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	RumQuery []WidgetToplistDefinitionRequestRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []WidgetToplistDefinitionRequestSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	Style []WidgetToplistDefinitionRequestStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetToplistDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetToplistDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []WidgetToplistDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetToplistDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetToplistDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetToplistDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetToplistDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetToplistDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetToplistDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetToplistDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	// +kubebuilder:validation:Optional
	Style []WidgetToplistDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetToplistDefinitionRequestProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetToplistDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []WidgetToplistDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetToplistDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetToplistDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetToplistDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetToplistDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetToplistDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetToplistDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetToplistDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetToplistDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetToplistDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetToplistDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetToplistDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetToplistDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetToplistDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetToplistDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetToplistDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetToplistDefinitionRequestRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetToplistDefinitionRequestRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetToplistDefinitionRequestRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetToplistDefinitionRequestRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []WidgetToplistDefinitionRequestSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []WidgetToplistDefinitionRequestSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []WidgetToplistDefinitionRequestSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestStyleObservation struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetToplistDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetTopologyMapDefinitionCustomLinkObservation struct {

	// The flag for toggling context menu link visibility.
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetTopologyMapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetTopologyMapDefinitionObservation struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	CustomLink []WidgetTopologyMapDefinitionCustomLinkObservation `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (`query` and `request_type` are required within the request).
	Request []WidgetTopologyMapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetTopologyMapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetTopologyMapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (`query` and `request_type` are required within the request).
	// +kubebuilder:validation:Optional
	Request []WidgetTopologyMapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetTopologyMapDefinitionRequestObservation struct {

	// The query for a Topology request.
	Query []WidgetTopologyMapDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// The request type for the Topology request ('topology'). Valid values are `topology`.
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`
}

type WidgetTopologyMapDefinitionRequestParameters struct {

	// The query for a Topology request.
	// +kubebuilder:validation:Required
	Query []WidgetTopologyMapDefinitionRequestQueryParameters `json:"query" tf:"query,omitempty"`

	// The request type for the Topology request ('topology'). Valid values are `topology`.
	// +kubebuilder:validation:Required
	RequestType *string `json:"requestType" tf:"request_type,omitempty"`
}

type WidgetTopologyMapDefinitionRequestQueryObservation struct {

	// The data source for the Topology request ('service_map' or 'data_streams'). Valid values are `data_streams`, `service_map`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// The ID of the service to map.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type WidgetTopologyMapDefinitionRequestQueryParameters struct {

	// The data source for the Topology request ('service_map' or 'data_streams'). Valid values are `data_streams`, `service_map`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type WidgetTraceServiceDefinitionObservation struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	SpanName *string `json:"spanName,omitempty" tf:"span_name,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetTraceServiceDefinitionParameters struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	// +kubebuilder:validation:Optional
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	// +kubebuilder:validation:Optional
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	// +kubebuilder:validation:Optional
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	// +kubebuilder:validation:Optional
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	// +kubebuilder:validation:Optional
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	// +kubebuilder:validation:Optional
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	// +kubebuilder:validation:Optional
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	// +kubebuilder:validation:Required
	SpanName *string `json:"spanName" tf:"span_name,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetTreemapDefinitionObservation struct {

	// Nested block describing the request to use when displaying the widget.
	Request []WidgetTreemapDefinitionRequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type WidgetTreemapDefinitionParameters struct {

	// Nested block describing the request to use when displaying the widget.
	// +kubebuilder:validation:Optional
	Request []WidgetTreemapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaConditionalFormatsObservation struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaLimitObservation struct {

	// The number of results to return
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaObservation struct {

	// An expression alias.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	ConditionalFormats []WidgetTreemapDefinitionRequestFormulaConditionalFormatsObservation `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	FormulaExpression *string `json:"formulaExpression,omitempty" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	Limit []WidgetTreemapDefinitionRequestFormulaLimitObservation `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	Style []WidgetTreemapDefinitionRequestFormulaStyleObservation `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetTreemapDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetTreemapDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`

	// Styling options for widget formulas.
	// +kubebuilder:validation:Optional
	Style []WidgetTreemapDefinitionRequestFormulaStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaStyleObservation struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetTreemapDefinitionRequestFormulaStyleParameters struct {

	// The color palette used to display the formula. A guide to the available color palettes can be found at https://docs.datadoghq.com/dashboards/guide/widget_colors
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// Index specifying which color to use within the palette.
	// +kubebuilder:validation:Optional
	PaletteIndex *float64 `json:"paletteIndex,omitempty" tf:"palette_index,omitempty"`
}

type WidgetTreemapDefinitionRequestObservation struct {
	Formula []WidgetTreemapDefinitionRequestFormulaObservation `json:"formula,omitempty" tf:"formula,omitempty"`

	Query []WidgetTreemapDefinitionRequestQueryObservation `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []WidgetTreemapDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetTreemapDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryObservation struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryApmResourceStatsQueryObservation struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// APM Environment.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Array of fields to group results by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of operation on service.
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_distribution`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryComputeObservation struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryGroupByObservation struct {

	// The event facet.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The number of groups to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	Sort []WidgetTreemapDefinitionRequestQueryEventQueryGroupBySortObservation `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetTreemapDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryGroupBySortObservation struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryObservation struct {

	// The compute options.
	Compute []WidgetTreemapDefinitionRequestQueryEventQueryComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Group by options.
	GroupBy []WidgetTreemapDefinitionRequestQueryEventQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The search options.
	Search []WidgetTreemapDefinitionRequestQueryEventQuerySearchObservation `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetTreemapDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`, `ci_tests`, `ci_pipelines`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTreemapDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetTreemapDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`

	// Storage location (private beta).
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQuerySearchObservation struct {

	// The events search string.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryMetricQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metrics query definition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryObservation struct {

	// The APM Dependency Stats query using formulas and functions.
	ApmDependencyStatsQuery []WidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryObservation `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	ApmResourceStatsQuery []WidgetTreemapDefinitionRequestQueryApmResourceStatsQueryObservation `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	EventQuery []WidgetTreemapDefinitionRequestQueryEventQueryObservation `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	MetricQuery []WidgetTreemapDefinitionRequestQueryMetricQueryObservation `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	ProcessQuery []WidgetTreemapDefinitionRequestQueryProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetTreemapDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetTreemapDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetTreemapDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetTreemapDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryProcessQueryObservation struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetTreemapDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetWidgetLayoutObservation struct {

	// The height of the widget.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type WidgetWidgetLayoutParameters struct {

	// The height of the widget.
	// +kubebuilder:validation:Required
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	// +kubebuilder:validation:Optional
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	// +kubebuilder:validation:Required
	Width *float64 `json:"width" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	X *float64 `json:"x" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	Y *float64 `json:"y" tf:"y,omitempty"`
}

type XApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []XApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type XApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []XApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []XApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []XApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []XLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type XLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []XLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []XLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []XLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XObservation struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []XApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []XLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []XProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []XRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []XSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type XParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []XApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []XLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []XProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []XRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []XSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type XProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type XProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type XRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []XRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type XRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []XRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []XRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []XRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []XSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type XSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []XSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []XSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []XSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type XaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type YApmQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []YApmQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YApmQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type YApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YApmQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []YApmQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []YApmQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []YApmQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YLogQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []YLogQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YLogQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type YLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YLogQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []YLogQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []YLogQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []YLogQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YObservation struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	ApmQuery []YApmQueryObservation `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	LogQuery []YLogQueryObservation `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	ProcessQuery []YProcessQueryObservation `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	RumQuery []YRumQueryObservation `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	SecurityQuery []YSecurityQueryObservation `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type YParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []YApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []YLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []YProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []YRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []YSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type YProcessQueryObservation struct {

	// A list of processes.
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Your chosen search term.
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type YProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type YRumQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []YRumQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YRumQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type YRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YRumQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []YRumQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []YRumQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []YRumQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YSecurityQueryComputeQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryGroupByObservation struct {

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	SortQuery []YSecurityQueryGroupBySortQueryObservation `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YSecurityQueryGroupBySortQueryObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type YSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YSecurityQueryMultiComputeObservation struct {

	// The aggregation method.
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The facet name.
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryObservation struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	ComputeQuery []YSecurityQueryComputeQueryObservation `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	GroupBy []YSecurityQueryGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	MultiCompute []YSecurityQueryMultiComputeObservation `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YaxisObservation struct {

	// Always include zero or fit the axis to the data range.
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type YaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

// DashboardSpec defines the desired state of Dashboard
type DashboardSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardParameters `json:"forProvider"`
}

// DashboardStatus defines the observed state of Dashboard.
type DashboardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Dashboard is the Schema for the Dashboards API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Dashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.layoutType)",message="layoutType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.title)",message="title is a required parameter"
	Spec   DashboardSpec   `json:"spec"`
	Status DashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardList contains a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dashboard `json:"items"`
}

// Repository type metadata.
var (
	Dashboard_Kind             = "Dashboard"
	Dashboard_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dashboard_Kind}.String()
	Dashboard_KindAPIVersion   = Dashboard_Kind + "." + CRDGroupVersion.String()
	Dashboard_GroupVersionKind = CRDGroupVersion.WithKind(Dashboard_Kind)
)

func init() {
	SchemeBuilder.Register(&Dashboard{}, &DashboardList{})
}
