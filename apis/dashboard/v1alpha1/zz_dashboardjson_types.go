/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardJSONObservation struct {

	// The JSON formatted definition of the Dashboard.
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// A list of dashboard lists this dashboard belongs to.
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoved []*float64 `json:"dashboardListsRemoved,omitempty" tf:"dashboard_lists_removed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL of the dashboard.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type DashboardJSONParameters struct {

	// The JSON formatted definition of the Dashboard.
	// +kubebuilder:validation:Optional
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// A list of dashboard lists this dashboard belongs to.
	// +kubebuilder:validation:Optional
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The URL of the dashboard.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// DashboardJSONSpec defines the desired state of DashboardJSON
type DashboardJSONSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardJSONParameters `json:"forProvider"`
}

// DashboardJSONStatus defines the observed state of DashboardJSON.
type DashboardJSONStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardJSONObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardJSON is the Schema for the DashboardJSONs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type DashboardJSON struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dashboard)",message="dashboard is a required parameter"
	Spec   DashboardJSONSpec   `json:"spec"`
	Status DashboardJSONStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardJSONList contains a list of DashboardJSONs
type DashboardJSONList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardJSON `json:"items"`
}

// Repository type metadata.
var (
	DashboardJSON_Kind             = "DashboardJSON"
	DashboardJSON_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardJSON_Kind}.String()
	DashboardJSON_KindAPIVersion   = DashboardJSON_Kind + "." + CRDGroupVersion.String()
	DashboardJSON_GroupVersionKind = CRDGroupVersion.WithKind(DashboardJSON_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardJSON{}, &DashboardJSONList{})
}
